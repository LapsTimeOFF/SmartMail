import { app, BrowserWindow, protocol } from "electron";
import handler from "serve-handler";
import http from "http";
import path from "path";
import getPort from "get-port";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let portAvailable: number;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = async (): Promise<void> => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  if (process.env.NODE_ENV === "production") {
    portAvailable = await getPort({ port: 3000 });
    const server = http.createServer((request, response) => {
      // You pass two more arguments for config and middleware
      // More details here: https://github.com/vercel/serve-handler#options
      return handler(request, response, {
        // public: process.cwd() + "/electron-vite-ts-react.app/Contents/Resources/app/.webpack/renderer/"
        public: path.join(__dirname, "../renderer"),
      });
    });

    server.listen(portAvailable, () => {
      console.log(`Running at http://localhost:${portAvailable}`);
    });
  }

  // and load the index.html of the app.
  mainWindow.loadURL(
    process.env.NODE_ENV === "development"
      ? MAIN_WINDOW_WEBPACK_ENTRY
      : `http://localhost:${portAvailable}/main_window/`
  );

  // Open the DevTools.
  if (process.env.NODE_ENV !== "production")
    mainWindow.webContents.openDevTools();
};

const privileges = {
  standard: true,
  bypassCSP: true,
  allowServiceWorkers: true,
  supportFetchAPI: true,
  corsEnabled: false,
  stream: true,
};

protocol.registerSchemesAsPrivileged([
  { scheme: "http", privileges },
  { scheme: "https", privileges },
  { scheme: "file", privileges },
  { scheme: "ws", privileges },
  { scheme: "wss", privileges },
]);

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
